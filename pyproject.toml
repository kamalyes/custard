[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "custard"
version = "1.1.6"
description = "custard easy to learn, fast to code, ready for production"
readme = "README.md"
license = "MIT"
authors = ["Kamalyes <mryu168@163.com>",]

repository = "https://github.com/kamalyes/custard"

classifiers = [
    "Intended Audience :: System Administrators",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed",
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
]


[tool.poetry.dependencies]
python = ">=3.9,<4.0"
mypy = "^1.2.0"
ruff = ">=0.0.263,<0.0.266"
types-PyYAML="^6.0.12.9"
types-requests="^2.29.0.0"
types-urllib3="^1.26.25.11"
types-python-dateutil="^2.8.19.12"
types-simplejson="^3.19.0.0"
pydantic = ">=1.9.1"
SQLAlchemy = { version = ">=1.3.20,<2.0.13", optional = true }
Faker = { version = ">=13.6.0,<18.7.0", optional = true }
fastapi = { version = ">=0.78.0,<0.95.2", optional = true }
psycopg2-binary = "^2.9.5"
mkdocs = "^1.4.1"
mkdocs-material = "^9.1.8"
httpx = "^0.24.0"
asgi-lifespan = "^2.1.0"
requests = "^2.29.0"
uvicorn = { version = ">=0.17.6,<0.23.0", optional = true }
Jinja2 = "^3.1.2"
pypinyin = ">=0.39.1,<0.49.0"
pyjwt = "^2.4.0"
six = "^1.16.0"
kafka = "^1.3.5"
contextvars = "^2.4"
starlette = ">=0.19.1,<0.27.0"
aioredis = "^2.0.1"
lxml = "^4.9.0"
redis = ">=3.5.3,<5.0.0"
certifi = { version = "<=2023.5.7", optional = true }
dicttoxml = "^1.7.4"
crypto = "^1.4.1"
PyYAML = "^6.0"
urllib3 = ">=1.26.12,<3.0.0"
w3lib = "^2.1.1"
py_mini_racer="^0.6.0"
pillow="^9.5.0"

[tool.poetry.dev-dependencies]
pytest = "^7.3.1"
pytest-cov = "^4.0.0"
pytest-asyncio = "^0.21.0"
black = "^23.3.0"
pre-commit = "^3.2.2"

[tool.poetry.extras]
all = [
    "Faker",
    "pypinyin",
    "pyjwt",
    "six",
    "kafka",
    "fastapi",
    "sqlalchemy",
    "uvicorn",
    "pydantic",
    "contextvars",
    "requests",
    "starlette",
    "aioredis",
    "lxml",
    "redis",
    "mkdocs",
    "certifi",
    "dicttoxml",
    "crypto",
    "PyYAML",
    "urllib3",
    "w3lib"
]

[tool.black]
line-length = 120
target-version = ['py39']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | __init__.py
  | buck-out
  | build
  | dist
  # The following are specific to Black, you probably don't want those.
  | blib2to3
  | tests/data
  | profiling
)/
'''

[tool.ruff]
line-length = 120
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
    "S",  # flake8-bandit
    "G",  # flake8-logging-format
    "PIE", # flake8-pie
    "COM", # flake8-commas
    "PT", # flake8-pytest-style
    "Q",  # flake8-quotes
    "RSE", # flake8-raise
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "TRY", # tryceratops
    "RUF", # ruff specific rules
]
ignore = [
    "B008",  # do not perform function calls in argument defaults
    "S101",  # use of assert detected
    "PT004", # fixture doesn't return anything
    "PT013", # allow from pytest import thing
    "SIM114", # allow have multiplie ifs with same body
    "TRY003", # allow long exc message
    "RUF100", # allow unused noqa
]

exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    ".venv",
]
per-file-ignores = {}
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
target-version = "py39"

[tool.ruff.mccabe]
max-complexity = 10

[tool.mypy]
python_version = 3.9
strict = true
follow_imports = "normal"
ignore_missing_imports = true
no_implicit_reexport = false
show_column_numbers= true
show_error_codes= true
# check_untyped_defs = false
# disallow_untyped_defs = false

[tool.coverage.paths]
source = ["custard"]

[tool.coverage.run]
source = ["custard"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "@abstractmethod",
    "@overload",
    "if TYPE_CHECKING:",
]
